データ構造

•Array
•メリット：インデックスを通して高速にアクセス可能。末尾のデータ挿入、削除は高速
•デメリット：データが大きい場合に大量のメモリを消費する。インデックス中間部分へのデータの挿入、削除が遅い

•Linked List
•メリット：データをどの部分であっても挿入、削除が容易なためリサイズが容易
•デメリット： リンクを辿ってアクセスするためデータのアクセスが遅い。次のデータのアドレスを保持するためデータのサイズがその分大きくなる。

•Binary Tree
•メリット：挿入、更新がLinked Listのように高速にでき、なおかつ検索も早い。
•デメリット：深さが平衡していないと性能に悪影響を与える

•Trie
•メリット：辞書など大量のデータパターンを高速に扱いたい場合に使用
•デメリット：メモリ消費量が多い

•Graph
•メリット：TreeやTrieでは扱えない循環型のデータを扱う時に使用。nodeごとのコストを割り振ることもできるので最適なルートやコストを求める問題にも適用可能。
•デメリット： 複雑な為、扱うのが難しい

•Stack
•メリット：データの取得は高速。再帰的な処理などと相性が良い
•デメリット：何も考えずに使うとStack Over Flowのようなメモリリークを起こす。中間のデータにはアクセス不可

•Queue
•メリット：データの取得は高速。ファイルの入出力やWEBからのデータ入出力などと相性が良い
•デメリット：スタックと同様で何も考えずに使うとメモリリークを起こす。中間のデータにはアクセス不可
